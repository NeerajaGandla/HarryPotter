// Generated by Dagger (https://dagger.dev).
package com.neeraja.harrypotter.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.neeraja.harrypotter.application.HarryPotterApp;
import com.neeraja.harrypotter.data.mapper.CharacterDomainDataMapper_Factory;
import com.neeraja.harrypotter.data.mapper.HouseDomainDataMapper_Factory;
import com.neeraja.harrypotter.data.repository.HogwartsRepositoryImpl;
import com.neeraja.harrypotter.data.repository.HogwartsRepositoryImpl_Factory;
import com.neeraja.harrypotter.domain.usecases.GetAllHousesTask;
import com.neeraja.harrypotter.domain.usecases.GetAllHousesTask_Factory;
import com.neeraja.harrypotter.domain.usecases.GetCharacterByIdTask;
import com.neeraja.harrypotter.domain.usecases.GetCharacterByIdTask_Factory;
import com.neeraja.harrypotter.domain.usecases.GetHouseByIdTask;
import com.neeraja.harrypotter.domain.usecases.GetHouseByIdTask_Factory;
import com.neeraja.harrypotter.presentation.factory.ViewModelFactory;
import com.neeraja.harrypotter.presentation.factory.ViewModelFactory_Factory;
import com.neeraja.harrypotter.presentation.mapper.CharacterEntityMapper_Factory;
import com.neeraja.harrypotter.presentation.mapper.HouseEntityMapper_Factory;
import com.neeraja.harrypotter.presentation.viewmodels.CharacterViewModel;
import com.neeraja.harrypotter.presentation.viewmodels.CharacterViewModel_Factory;
import com.neeraja.harrypotter.presentation.viewmodels.HouseDetailViewModel;
import com.neeraja.harrypotter.presentation.viewmodels.HouseDetailViewModel_Factory;
import com.neeraja.harrypotter.presentation.viewmodels.HousesViewModel;
import com.neeraja.harrypotter.presentation.viewmodels.HousesViewModel_Factory;
import com.neeraja.harrypotter.remote.api.HarryPotterService;
import com.neeraja.harrypotter.remote.mapper.CharacterDataNetworkMapper_Factory;
import com.neeraja.harrypotter.remote.mapper.HouseDataNetworkMapper_Factory;
import com.neeraja.harrypotter.remote.source.RemoteDataSourceImpl;
import com.neeraja.harrypotter.remote.source.RemoteDataSourceImpl_Factory;
import com.neeraja.harrypotter.ui.houses.HousesActivity;
import com.neeraja.harrypotter.ui.houses.HousesActivity_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import io.reactivex.Scheduler;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerHarryPotterAppComponent implements HarryPotterAppComponent {
  private Provider<AppModule_ContributesHousesActivity$app_debug.HousesActivitySubcomponent.Factory> housesActivitySubcomponentFactoryProvider;

  private Provider<String> provideApiKeyProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<HarryPotterService> providesHarryPotterServiceProvider;

  private Provider<RemoteDataSourceImpl> remoteDataSourceImplProvider;

  private Provider<HogwartsRepositoryImpl> hogwartsRepositoryImplProvider;

  private Provider<Scheduler> providesForegroundSchedulerProvider;

  private Provider<Scheduler> providesBackgroundSchedulerProvider;

  private Provider<GetAllHousesTask> getAllHousesTaskProvider;

  private Provider<GetHouseByIdTask> getHouseByIdTaskProvider;

  private Provider<HousesViewModel> housesViewModelProvider;

  private Provider<HouseDetailViewModel> houseDetailViewModelProvider;

  private Provider<GetCharacterByIdTask> getCharacterByIdTaskProvider;

  private Provider<CharacterViewModel> characterViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerHarryPotterAppComponent(DomainModule domainModuleParam,
      RemoteModule remoteModuleParam, IdentityModule identityModuleParam, Application application) {

    initialize(domainModuleParam, remoteModuleParam, identityModuleParam, application);
  }

  public static HarryPotterAppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(HousesActivity.class, (Provider) housesActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final DomainModule domainModuleParam,
      final RemoteModule remoteModuleParam, final IdentityModule identityModuleParam,
      final Application application) {
    this.housesActivitySubcomponentFactoryProvider = new Provider<AppModule_ContributesHousesActivity$app_debug.HousesActivitySubcomponent.Factory>() {
      @Override
      public AppModule_ContributesHousesActivity$app_debug.HousesActivitySubcomponent.Factory get(
          ) {
        return new HousesActivitySubcomponentFactory();}
    };
    this.provideApiKeyProvider = IdentityModule_ProvideApiKeyFactory.create(identityModuleParam);
    this.providesRetrofitProvider = RemoteModule_ProvidesRetrofitFactory.create(remoteModuleParam);
    this.providesHarryPotterServiceProvider = RemoteModule_ProvidesHarryPotterServiceFactory.create(remoteModuleParam, providesRetrofitProvider);
    this.remoteDataSourceImplProvider = RemoteDataSourceImpl_Factory.create((Provider) HouseDataNetworkMapper_Factory.create(), (Provider) CharacterDataNetworkMapper_Factory.create(), providesHarryPotterServiceProvider);
    this.hogwartsRepositoryImplProvider = HogwartsRepositoryImpl_Factory.create((Provider) HouseDomainDataMapper_Factory.create(), (Provider) CharacterDomainDataMapper_Factory.create(), (Provider) remoteDataSourceImplProvider);
    this.providesForegroundSchedulerProvider = DoubleCheck.provider(DomainModule_ProvidesForegroundSchedulerFactory.create(domainModuleParam));
    this.providesBackgroundSchedulerProvider = DoubleCheck.provider(DomainModule_ProvidesBackgroundSchedulerFactory.create(domainModuleParam));
    this.getAllHousesTaskProvider = GetAllHousesTask_Factory.create((Provider) hogwartsRepositoryImplProvider, providesForegroundSchedulerProvider, providesBackgroundSchedulerProvider);
    this.getHouseByIdTaskProvider = GetHouseByIdTask_Factory.create((Provider) hogwartsRepositoryImplProvider, providesForegroundSchedulerProvider, providesBackgroundSchedulerProvider);
    this.housesViewModelProvider = HousesViewModel_Factory.create(provideApiKeyProvider, HouseEntityMapper_Factory.create(), getAllHousesTaskProvider, getHouseByIdTaskProvider);
    this.houseDetailViewModelProvider = HouseDetailViewModel_Factory.create(provideApiKeyProvider, (Provider) HouseEntityMapper_Factory.create(), getHouseByIdTaskProvider);
    this.getCharacterByIdTaskProvider = GetCharacterByIdTask_Factory.create((Provider) hogwartsRepositoryImplProvider, providesForegroundSchedulerProvider, providesBackgroundSchedulerProvider);
    this.characterViewModelProvider = CharacterViewModel_Factory.create(provideApiKeyProvider, (Provider) CharacterEntityMapper_Factory.create(), getCharacterByIdTaskProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3).put(HousesViewModel.class, (Provider) housesViewModelProvider).put(HouseDetailViewModel.class, (Provider) houseDetailViewModelProvider).put(CharacterViewModel.class, (Provider) characterViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(HarryPotterApp app) {
    injectHarryPotterApp(app);}

  private HarryPotterApp injectHarryPotterApp(HarryPotterApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements HarryPotterAppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application app) {
      this.application = Preconditions.checkNotNull(app);
      return this;
    }

    @Override
    public HarryPotterAppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerHarryPotterAppComponent(new DomainModule(), new RemoteModule(), new IdentityModule(), application);
    }
  }

  private final class HousesActivitySubcomponentFactory implements AppModule_ContributesHousesActivity$app_debug.HousesActivitySubcomponent.Factory {
    @Override
    public AppModule_ContributesHousesActivity$app_debug.HousesActivitySubcomponent create(
        HousesActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HousesActivitySubcomponentImpl(arg0);
    }
  }

  private final class HousesActivitySubcomponentImpl implements AppModule_ContributesHousesActivity$app_debug.HousesActivitySubcomponent {
    private HousesActivitySubcomponentImpl(HousesActivity arg0) {

    }

    @Override
    public void inject(HousesActivity arg0) {
      injectHousesActivity(arg0);}

    private HousesActivity injectHousesActivity(HousesActivity instance) {
      HousesActivity_MembersInjector.injectViewModelFactory(instance, DaggerHarryPotterAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
